<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://frsanchez.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://frsanchez.github.io//" rel="alternate" type="text/html" /><updated>2023-08-22T14:31:19-07:00</updated><id>https://frsanchez.github.io//feed.xml</id><title type="html">Sanchez Parra Labs Blog</title><subtitle>A blog about coding, photography and weekenders</subtitle><entry><title type="html">La Importancia de las APIs en el Mundo Tecnológico</title><link href="https://frsanchez.github.io//2021/06/15/ImportanciaDeLasAPIs.html" rel="alternate" type="text/html" title="La Importancia de las APIs en el Mundo Tecnológico" /><published>2021-06-15T00:00:00-07:00</published><updated>2021-06-15T00:00:00-07:00</updated><id>https://frsanchez.github.io//2021/06/15/ImportanciaDeLasAPIs</id><content type="html" xml:base="https://frsanchez.github.io//2021/06/15/ImportanciaDeLasAPIs.html"><![CDATA[<p>En el vertiginoso mundo tecnológico de hoy en día, las APIs (Interfaces de Programación de Aplicaciones, por sus siglas en inglés) desempeñan un papel fundamental en el funcionamiento y la interconexión de diferentes sistemas y aplicaciones. Desde el ámbito empresarial hasta el desarrollo de software, las APIs han revolucionado la forma en que las empresas interactúan con sus clientes, optimizan sus operaciones y promueven la colaboración entre diversas plataformas.</p>

<h1 id="qué-es-un-api-y-por-qué-es-relevante">¿Qué es un API y por qué es relevante?</h1>

<p>Un API es un conjunto de reglas y protocolos que permite que diferentes aplicaciones se comuniquen entre sí. Básicamente, actúa como un intermediario que facilita la interacción y el intercambio de datos entre diferentes sistemas, sin que los usuarios finales necesiten comprender los detalles técnicos subyacentes.</p>

<p>La relevancia de las APIs radica en su capacidad para permitir la integración y la colaboración sin problemas entre diferentes sistemas. Al proporcionar una interfaz estándar para la comunicación y el intercambio de datos, las APIs eliminan la necesidad de desarrollar soluciones personalizadas desde cero. Esto no solo ahorra tiempo y recursos, sino que también fomenta la innovación y la creación de nuevas aplicaciones y servicios.</p>

<h1 id="las-apis-web-y-su-impacto">Las APIs Web y su impacto:</h1>

<p>En este artículo, nos centraremos en las APIs web, que son interfaces de programación diseñadas para permitir la comunicación entre aplicaciones a través de la web. Estas APIs utilizan protocolos estándar basados en HTTP, como REST (Representational State Transfer) y GraphQL, para facilitar la transferencia de datos.</p>

<h1 id="el-crecimiento-exponencial-de-las-apis">El crecimiento exponencial de las APIs:</h1>

<p>El impacto de las APIs en el mundo tecnológico es innegable. Según estudios recientes, el número de APIs públicas disponibles ha experimentado un crecimiento significativo en los últimos años. Por ejemplo, en el año 2019, el número total de APIs públicas superó la asombrosa cifra de 50,000, lo que representa un incremento del 144% en comparación con el año anterior (Fuente: insertar referencia). Este crecimiento continuo demuestra la creciente importancia y adopción de las APIs en el mundo actual.</p>

<h1 id="beneficios-de-las-apis-en-el-mundo-empresarial">Beneficios de las APIs en el mundo empresarial:</h1>

<ol>
  <li>
    <p>Ampliación del alcance y la presencia en línea: Las APIs permiten que las empresas compartan sus servicios y datos con socios y desarrolladores externos, lo que brinda la oportunidad de expandir su alcance y llegar a nuevos clientes.</p>
  </li>
  <li>
    <p>Innovación y agilidad: Las APIs fomentan la innovación al proporcionar una plataforma para que los desarrolladores creen nuevas aplicaciones y servicios utilizando la funcionalidad existente de otros sistemas.</p>
  </li>
  <li>
    <p>Mejora de la experiencia del cliente: Las APIs permiten a las empresas integrar sus servicios con otras aplicaciones populares, brindando a los clientes una experiencia más fluida y personalizada.</p>
  </li>
  <li>
    <p>Eficiencia operativa: Al utilizar APIs para automatizar procesos y compartir datos, las empresas pueden optimizar sus operaciones internas y mejorar la eficiencia.</p>
  </li>
  <li>
    <p>Mejores prácticas para el desarrollo de APIs (próximo artículo):</p>
  </li>
</ol>

<p>En un próximo artículo, exploraremos en detalle las mejores prácticas para el desarrollo de APIs. Discutiremos la importancia de un diseño claro y coherente, la documentación exhaustiva, la autenticación y autorización seguras, y otros aspectos clave que garantizan la calidad y la adopción exitosa de una API.</p>

<h1 id="conclusión">Conclusión:</h1>

<p>En el vertiginoso mundo tecnológico actual, las APIs desempeñan un papel esencial en la interconexión de sistemas y aplicaciones. Con su capacidad para fomentar la innovación, mejorar la eficiencia operativa y ampliar el alcance de las empresas, las APIs se han convertido en una herramienta fundamental para el éxito en el mundo digital. A medida que el número de APIs públicas continúa en aumento, es fundamental comprender su importancia y adoptar las mejores prácticas para su desarrollo y uso eficiente.</p>]]></content><author><name></name></author><category term="APIs" /><category term="Interfaces de Programación de Aplicaciones" /><category term="Importancia de las APIs" /><category term="Conectividad tecnológica" /><category term="Innovación tecnológica" /><category term="Integración de sistemas" /><category term="Colaboración de aplicaciones" /><category term="Interconexión de aplicaciones" /><category term="Beneficios de las APIs" /><category term="APIs web" /><category term="Desarrollo de APIs" /><category term="Empresas y APIs" /><category term="Experiencia del cliente y APIs" /><category term="Eficiencia operativa y APIs" /><category term="Mejores prácticas para APIs" /><category term="Diseño de APIs" /><category term="Documentación de APIs" /><category term="Autenticación y autorización de APIs" /><category term="Crecimiento de las APIs" /><category term="Estadísticas de APIs" /><summary type="html"><![CDATA[En el vertiginoso mundo tecnológico de hoy en día, las APIs (Interfaces de Programación de Aplicaciones, por sus siglas en inglés) desempeñan un papel fundamental en el funcionamiento y la interconexión de diferentes sistemas y aplicaciones. Desde el ámbito empresarial hasta el desarrollo de software, las APIs han revolucionado la forma en que las empresas interactúan con sus clientes, optimizan sus operaciones y promueven la colaboración entre diversas plataformas.]]></summary></entry><entry><title type="html">Champiñones con papas</title><link href="https://frsanchez.github.io//chanpinonesconpapas/" rel="alternate" type="text/html" title="Champiñones con papas" /><published>2021-01-23T00:00:00-08:00</published><updated>2021-01-23T00:00:00-08:00</updated><id>https://frsanchez.github.io//HongosConPapas</id><content type="html" xml:base="https://frsanchez.github.io//chanpinonesconpapas/"><![CDATA[<iframe width="1082" height="608" src="https://www.youtube.com/embed/5JbnxtnZE0M" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>]]></content><author><name>Muriel Parra</name></author><category term="recetas" /><category term="champiñones" /><category term="hongos" /><category term="papas" /><category term="cocina" /><summary type="html"><![CDATA[Quesadillas de champiñones con papas.]]></summary></entry><entry><title type="html">El Santo Rosario (spanish)</title><link href="https://frsanchez.github.io//rosario/" rel="alternate" type="text/html" title="El Santo Rosario (spanish)" /><published>2020-06-22T00:00:00-07:00</published><updated>2020-06-22T00:00:00-07:00</updated><id>https://frsanchez.github.io//Rosario</id><content type="html" xml:base="https://frsanchez.github.io//rosario/"><![CDATA[<p>Una de las devociones cristianas más hermosas es meditar la vida de nuestro Señor
Jesucristo en compañía de su santa madre. Aunque no me considero experto en el tema,
si quiero compartir este excelente ejercicio espiritual diaro y entonces aquí
presento una breve introducción a como rezar el rosario. Para una explicación detallada
sugiero leer la carta “<a href="http://www.vatican.va/content/john-paul-ii/es/apost_letters/2002/documents/hf_jp-ii_apl_20021016_rosarium-virginis-mariae.html" target="blank">Rosarium Virginis Mariae</a>” de San Juan Pablo II.</p>

<p>El rosario puede ser también una actividad en grupo, para lo cual hay algunas
pequeñas reglas para hacerlo sumamente interactivo de tal manera que todos
participen por igual, pero manteniendo una persona que lo dirija, y es exactamente
el mismo formato cuando se hace con una sola persona.</p>

<p>Una búsqueda en internet te regresará distintas ligas con algunas pequeñas variaciones
de como iniciar, y como cerrar tu oración del rosario. Aquí presento el formato que
más ha funcionado para mi.</p>

<p>Voy a iniciar indicando el formato y voy a poner el texto completo de las oraciones
después, incluyendo los grupos de misterios separados por día de la semana.</p>

<h2 id="órden-del-rosario">Órden del rosario.</h2>

<h2 id="inicio">Inicio</h2>
<h3 id="signarse">Signarse</h3>
<p>Hacemos la señal de la cruz en la frente, luego en la boca y luego en el pecho. mientras
repetimos:</p>

<table>
  <tbody>
    <tr>
      <td>Por la señal de la Santa Cruz, de nuestros enemigos líbranos Señor, Dios nuestro. En el nombre del Padre, y del Hijo, y del Espíritu Santo. Amén.</td>
    </tr>
  </tbody>
</table>

<h3 id="credo-y-acto-de-contrición">Credo y acto de contrición</h3>

<table>
  <thead>
    <tr>
      <th>Credo de los Apóstoles</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Creo en Dios, Padre todo poderoso, creador del cielo y de la tierra. Creo en Jesucristo, su único Hijo, nuestro Señor, que fue concebido por obra y gracia del Espíritu Santo, nació de santa María Virgen, padeció bajo el poder de Poncio Pilato, fue crucificado, muerto y sepultado, descendió a los infiernos, al tercer día resucitó de entre los muertos, subió a los cielos y está sentado a la derecha de dios, Padre todo poderoso. Desde allí ha de venir a juzgar a vivos y muertos. Creo en el Espíritu Santo, la santa iglesia Católica, la comunión de los santos, el perdón de los pecados, la resurrección de la carne y la vida eterna. Amén.</td>
    </tr>
    <tr>
      <td><strong>Acto de contrición</strong> (opcional)</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>Jesús, Dios y hombre verdadero, Creador, Padre y Redentor mío; por que tú eres bondad infinita, y porque te amo sobre todas las cosas, me pesa de todo corazón haberte ofendido, también me pesa porque puedes castigarme con las penas del infierno. Por eso propongo con tu gracia, enmendarme, confesarme, alejarme de las ocasiones de pecado y cumplir la penitencia que me fuera impuesta. Confio en que me perdonarás por tu infinita misericordia. Amén</td>
    </tr>
  </tbody>
</table>

<h3 id="tres-ave-maría">Tres <a href="#ave-maría">Ave María</a></h3>

<h2 id="misterios">Misterios</h2>

<p>El rosario tiene 5 grupos de diez cuentas separados por una única cuenta. Cada grupo de diez cuentas se llama una década.
Para poder entrar en la década, el que dirige el rosario debe enunciar el misterio, seguido por un <a href="#padre-nuestro">Padre Nuestro</a>.
Un Misterio es un episodio de la vida de nuestro Señor Jeuscristo el cual meditamos durante cada una de las diez cuentas
junto con la madre de nuestro señor y es por eso que en cada cuenta se reza un Ave María. Luego se termina la década con una o más jaculatorias.</p>

<h3 id="jaculatorias">Jaculatorias</h3>

<p>Una jaculatoria es una oración corta llena de amor y devoción con la que nos comunicamos con nuestro Señor Padre,
su hijo Jesucristo, la santa Virgen María y el Espíritu Santo. Su finalidad es mantenernos bajo la gracia de Dios
a lo largo del día, todos los días de nuestra vida.</p>

<table>
  <tbody>
    <tr>
      <td>María, madre de gracia, madre de misericordia: En la vida y en la muerte ampáranos gran señora</td>
    </tr>
    <tr>
      <td>Oh Jesús mío: Perdona nuestros pecados, sálvanos de las llamas y del fuego del infierno. Lleva al cielo a todas las almas, especialmente a las más necesitadas de tu divina misericordia.</td>
    </tr>
  </tbody>
</table>

<p>Los misterios que se meditan cambian de acuerdo al día de la semana, y están expuestos en la siguiente tabla:</p>

<table>
  <thead>
    <tr>
      <th>Día</th>
      <th>Misterios</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Lunes y sábado</td>
      <td><a href="#misterios-de-gozo">Gozosos</a></td>
    </tr>
    <tr>
      <td>Jueves</td>
      <td><a href="#misterios-de-luz">Luminosos</a></td>
    </tr>
    <tr>
      <td>Martes y viernes</td>
      <td><a href="#misterios-de-dolor">Dolorosos</a></td>
    </tr>
    <tr>
      <td>Miércoles y domingo</td>
      <td><a href="#misterios-de-gloria">Gloriosos</a></td>
    </tr>
  </tbody>
</table>

<h3 id="misterios-de-gozo">Misterios de gozo</h3>
<ol>
  <li>La Anunciación</li>
  <li>La Visitación</li>
  <li>El nacimiento de Jesús</li>
  <li>La Presentación</li>
  <li>El niño perdido y hallado en el templo</li>
</ol>

<h3 id="misterios-de-luz">Misterios de luz</h3>
<ol>
  <li>El bautismo en el Jordán</li>
  <li>La autorrevelación en las bodas de Caná</li>
  <li>El anuncio del Reino de Dios, invitando a la conversión</li>
  <li>La transfiguración</li>
  <li>La institución de la Eucaristía</li>
</ol>

<h3 id="misterios-de-dolor">Misterios de dolor</h3>
<ol>
  <li>La agonía en el huerto</li>
  <li>La flagelación de nuestro señor</li>
  <li>La coronación de espinas</li>
  <li>El camino al Calvario</li>
  <li>La crucifixión</li>
</ol>

<h3 id="misterios-de-gloria">Misterios de gloria</h3>
<ol>
  <li>La resurreción del Señor</li>
  <li>La ascención</li>
  <li>La venida del Espíritu Santo</li>
  <li>La asunción de la Virgen Santísima</li>
  <li>La coronación de la Virgen Santísima como Reina del Cielo</li>
</ol>

<h2 id="cierre-y-entrega">Cierre y entrega</h2>

<table>
  <thead>
    <tr>
      <th><strong>Salve</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Dios te salve, Reina y Madre de misericordia. Vida, dulzura y esperanza nuestra. Dios te salve. A ti clamamos los desterrados hijos de Eva, a ti suspiramos gimiendo y llorando desde este valle de lágrimas. ¡Ea! pues, señora aboada nuestra, vuelve a nosotros tus ojos misericordiosos y después de este destierro, múestranos a Jesús, fruto bendito de tu vientre. ¡Oh clemente, oh piadosa, oh dulce siempre Virgen María!. Ruega por nosotros, Santa Madre de Dios, para que seamos dignos de alcanzar las promesas y gracias de Nuestro Señor Jesucristo. Amén.</td>
    </tr>
  </tbody>
</table>

<h3 id="padre-nuestro">Padre Nuestro</h3>

<table>
  <tbody>
    <tr>
      <td>Padre Nuestro, que estás en el cielo, santificado sea tu nombre. Venga a nosotros tu reino. Hágase tu volunta, así en la tierra como en el cielo. Danos hoy el pan nuestro de cada día, y perdona nuestras ofenzas como nostros perdonamos a los que nos ofenden. No nos dejes caer en la tentación y líbranos de todo mal. Amén</td>
    </tr>
  </tbody>
</table>

<h3 id="ave-maría">Ave María</h3>

<table>
  <tbody>
    <tr>
      <td>Dios te salve María, llena eres de gracia, el Señor es contigo. Bendita eres entre las mujeres y bendito es el fruto de tu vientre: Jesús. Santa María, madre de Dios: ruega por nosotros pecadores, ahora y en la hora de nuestra muerte. Amén.</td>
    </tr>
  </tbody>
</table>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;avatar&quot;=&gt;&quot;assets/img/pexels/small-rosary.jpg&quot;, &quot;url&quot;=&gt;&quot;/rosario&quot;}</name></author><category term="rosary" /><category term="praying" /><summary type="html"><![CDATA[Una breve introducción a como rezar el santo rosario.]]></summary></entry><entry><title type="html">HashMap</title><link href="https://frsanchez.github.io//2020/03/16/Hashmap.html" rel="alternate" type="text/html" title="HashMap" /><published>2020-03-16T00:00:00-07:00</published><updated>2020-03-16T00:00:00-07:00</updated><id>https://frsanchez.github.io//2020/03/16/Hashmap</id><content type="html" xml:base="https://frsanchez.github.io//2020/03/16/Hashmap.html"><![CDATA[<p>This is another article in the group of data structures.</p>

<p>A hash map is a powerful in-memory data structure that allows adding and retrieving data in a constant time.
Most modern languages have support for this and usually they include variations and optimizations over it,
therefore most of us take this for granted, but this was not always the case, and here I try to explain
how this one works.
<!--excerpt-->
The basic data structure supported by any programming language is the array. An array is a contiguous block of memory
set aside to store the same type of data. For example an array of 10 integers, will occupy in a 64 bit machine 80 bytes.
An array is quite powerful because you can write and retrieve values from and to the array by using a single
operation, which is denoted as O(1) using the <a href="https://en.wikipedia.org/wiki/Big_O_notation" target="_blank">Big O</a> notation.</p>

<p>What a hash map solves is a problem where we want to have a set of data indexed instead of by numbers, by an
arbitrary type of data, this is known as an associative array because each value in the array is associated with a key
instead of a numeric index assigned by the value’s position within the array. But of course the order of the data
within the associative array is not given by any position. Conceptually it can be visualized as the following image:</p>

<p><img src="/assets/img/arrays.png" alt="array vs associative array" /></p>

<p>In the left hand side we have a basic array, indexed by the position in memory (and this is the reason why an array
  starts with index 0), while on the right hand side we have an associative array indexed by an arbitrary key. If we stored
  any value in the element associated with “alpha” we would be overwriting the element there.</p>

<p>The way to achieve this, first is to create an array with a fixed size that is capable of holding as many
elements as we need, and then using a hash function that translates the key into a unique integer value.
Once we have an integer value, we can simply calculate the hash key modulo the size of the array to find
the location of the element in the array.</p>

<p>Having a unique key and having the same key every time each element requires computing it is a must for the above
description to work. What happens after that with the key can change depending on the implementation. Having a large
integer module a shorter one (the size of the array) will lead inevitably to what is called collisions. That means two or more
keys will end up pointing to the same element in the array. To solve the collision, one way is to generate
a single linked list that starts in the element of the array indicated by the hash key. Another option is to start
calculating the (key + i) modulo (array size). Here i will mean how many iterations have to happen for us to find
an empty spot in the table. In my opinion the first one is a cleaner one and the one I have used for years.</p>

<p>If we wanted to calculate a simple hash value for the string in the input box below, we can use the following code</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nf">hashForString</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">total</span> <span class="o">+=</span> <span class="nx">str</span><span class="p">.</span><span class="nf">charCodeAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">total</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Enter text: <input id="input" /> Hash: <input id="hash" /></p>

<p>Javascript already provides associative arrays built, therefore there is no need to create a hash map, however
for example purposes we can implement a simple one following the guidelines above with the following code,
instead of writing pseudocode I prefer giving fully working javascript that can be run in this same browser
or adapted to your preferred language.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Holds the key value pair, as is the basis for a simple linked list</span>
<span class="kd">class</span> <span class="nc">Node</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">key</span> <span class="o">=</span> <span class="nx">key</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">HashMap</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// We use for example a 20 element array.</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">table</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Array</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">table</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nf">put</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// as usual validation, just make sure both the key and the value are valid</span>
    <span class="k">if </span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">undefined</span><span class="dl">'</span> <span class="o">||</span> <span class="k">typeof</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">undefined</span><span class="dl">'</span><span class="p">)</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">hash</span> <span class="o">=</span> <span class="nf">hashForString</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="o">%</span> <span class="mi">20</span><span class="p">;</span>
    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">table</span><span class="p">[</span><span class="nx">hash</span><span class="p">])</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">table</span><span class="p">[</span><span class="nx">hash</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// this code happens in case of (hash % 20) collisions</span>
      <span class="kd">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">table</span><span class="p">[</span><span class="nx">hash</span><span class="p">];</span>
      <span class="k">while </span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">node</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">node</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nf">get</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">undefined</span><span class="dl">'</span><span class="p">)</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">hash</span> <span class="o">=</span> <span class="nf">hashForString</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="o">%</span> <span class="mi">20</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">table</span><span class="p">[</span><span class="nx">hash</span><span class="p">];</span>
    <span class="c1">// we start on the first node in the table</span>
    <span class="c1">// and iterate until we reach the end or the requested key</span>
    <span class="k">while </span><span class="p">(</span><span class="nx">node</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">key</span> <span class="o">!==</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">node</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// an example of how to use it:</span>
  <span class="kd">var</span> <span class="nx">hm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="p">();</span>
  <span class="nx">hm</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="dl">"</span><span class="s2">one</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">text 1</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">hm</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="dl">"</span><span class="s2">two</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">text 2</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">hm</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">one</span><span class="dl">"</span><span class="p">));</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">hm</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">two</span><span class="dl">"</span><span class="p">));</span></code></pre></figure>

<p>Please let me know below your comments, and what other programming challenges you would like to get explained here.</p>]]></content><author><name></name></author><category term="HashMap" /><category term="Data structures" /><category term="Programing" /><summary type="html"><![CDATA[Explaining what a hash map is.]]></summary></entry><entry><title type="html">Binary Search Tree in Javascript</title><link href="https://frsanchez.github.io//2020/02/24/BinaryTreeInJavascript.html" rel="alternate" type="text/html" title="Binary Search Tree in Javascript" /><published>2020-02-24T00:00:00-08:00</published><updated>2020-02-24T00:00:00-08:00</updated><id>https://frsanchez.github.io//2020/02/24/BinaryTreeInJavascript</id><content type="html" xml:base="https://frsanchez.github.io//2020/02/24/BinaryTreeInJavascript.html"><![CDATA[<p>This is a sample implementation of a Binary Serach Tree in JavaScript. Right now it is a work in progress, please
keep looking for updates for this post, as I will keep working on it.</p>

<p>There will be a graphical representation of the tree in the are below that you can use to visualize the operations
as I keep progressing in this code.</p>

<canvas id="tree" width="600" height="500"></canvas>

<p><label for="number">Number:</label>
<input type="text" id="number" name="number" />
<button class="ui-button ui-widget ui-corner-all" id="insert">Insert</button>
<button class="ui-button ui-widget ui-corner-all" id="search">Search</button></p>

<p>First we have to define the basic piece, and that is going to be a Node:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">class</span> <span class="nc">Node</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">right</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">// ... other methods will go here</span>
<span class="p">}</span></code></pre></figure>

<p>The JavaScript constructor takes a value to store in the current node as the value, and also
sets the pointers to the left and right nodes as null. This is important to make sure the variables
don’t remain as undefined and also that they exist when accessing them from other methods.</p>

<p>As for the methods, let’s start by implementing the insert. The core of the algorithm is to check
if the new data has to go either to the left, or to the right, and then call the same insert recursively
from the chosen node, like the code below that returns a boolean value to indicate whether the new value
was inserted or not:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// ...</span>
  <span class="nf">insert</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>    
    <span class="c1">// First make sure we are inserting data but we also prevent duplicates</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">node</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="k">typeof</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="o">==</span> <span class="dl">'</span><span class="s1">undefined</span><span class="dl">'</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">===</span> <span class="nx">node</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// now chose whether go left</span>
    <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">&gt;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">left</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">node</span><span class="p">;</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">left</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// or go right</span>
      <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">right</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">right</span> <span class="o">=</span> <span class="nx">node</span><span class="p">;</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">right</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span>
<span class="c1">// ...</span></code></pre></figure>]]></content><author><name></name></author><category term="BinarySearch" /><category term="BinaryTree" /><category term="Programing" /><category term="Javascript" /><summary type="html"><![CDATA[Sample implementation of a binary search tree in JavaScript.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://frsanchez.github.io//assets/img/bintree.png" /><media:content medium="image" url="https://frsanchez.github.io//assets/img/bintree.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Ordering names</title><link href="https://frsanchez.github.io//2020/02/20/OrderingNames.html" rel="alternate" type="text/html" title="Ordering names" /><published>2020-02-20T00:00:00-08:00</published><updated>2020-02-20T00:00:00-08:00</updated><id>https://frsanchez.github.io//2020/02/20/OrderingNames</id><content type="html" xml:base="https://frsanchez.github.io//2020/02/20/OrderingNames.html"><![CDATA[<p>This is a sample block to read a list of names, order them and also create a random ordered list. The code even allows to drag and drop files into the text area for easier manipulation of long lists, and also to avoid storing any data on our server - because there is no need to do it.</p>

<p>The working area is next and <a href="#description-of-the-code">below</a> that is the description of the code</p>

<p><label for="names">Enter a list of names:</label></p>

<textarea id="names" rows="10" cols="50" placeholder="Enter each name in a line"></textarea>

<p><button class="ui-button ui-widget ui-corner-all" id="order">Go</button></p>

<div class="container">
  <div class="row">
    <div class="col-sm">
      <h4>Ordered</h4>
      <div id="ordered">
      </div>
    </div>
    <div class="col-sm">
      <h4>Randomized</h4>
      <div id="random">
      </div>
    </div>
  </div>
</div>

<h3 id="description-of-the-code">Description of the code</h3>

<p>Javascript file in <a href="https://github.com/FrSanchez/frsanchez.github.io/blob/master/assets/js-src/ordering.js">github</a></p>

<p>To read the names, the code takes the contents of the textarea and puts it into an array line by line to be able to manipulate it. JQuery makes it easy by using the textarea locator, retrieving the value and the using split() by newline, then sorting is native in javascript for an array:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">names</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#names</span><span class="dl">'</span><span class="p">).</span><span class="nf">val</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">names</span><span class="p">.</span><span class="nf">sort</span><span class="p">();</span></code></pre></figure>

<p>Javascript provides a pseudo-random number generator that produces number in the range (0, 1). For the case presented here we need an integer number in the range [0, names.length] for that we can write a simple function to take an upper boundary and produce a pseudo-random integer in that range:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">random</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">bound</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">bound</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>To be able to generate a random list, the code needs to iterate through the whole list of names and randomly select a new position for every entry:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">names</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">dest</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="nx">names</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">dest</span> <span class="o">!=</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">names</span><span class="p">[</span><span class="nx">dest</span><span class="p">];</span>
    <span class="nx">names</span><span class="p">[</span><span class="nx">dest</span><span class="p">]</span> <span class="o">=</span> <span class="nx">names</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
    <span class="nx">names</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">t</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h3 id="handling-files">Handling files</h3>
<p>To be able to manipulate files, the browser will generate events related to drag and drop, for which the program needs to handle <em>dragOver</em>, <em>dragEnter</em>, and <em>drop</em>. Within the drop handler, the program can instantiate the HTML5 FileReader object, that will read the local file. The reader works on events to avoid blocking the main (and only) thread executing the script. Within the handler of the reader, I load the contents of the file into the textarea using JQuery $.text() method.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileReader</span><span class="p">();</span>
<span class="nx">reader</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">load</span><span class="dl">"</span><span class="p">,</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">fileText</span> <span class="o">=</span> <span class="nx">reader</span><span class="p">.</span><span class="nx">result</span><span class="p">;</span>
    <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#names</span><span class="dl">'</span><span class="p">).</span><span class="nf">text</span><span class="p">(</span><span class="nx">fileText</span><span class="p">);</span>
<span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
<span class="nx">reader</span><span class="p">.</span><span class="nf">readAsText</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span></code></pre></figure>

<h2 id="conclusion">Conclusion</h2>

<p>Reading a file is now part HTML5, array manipulation is done easily with javascript, and that includes the sort method, as well as a pseudo-random number generator. Javascript provides also handling of the DOM but in this case I opted for JQuery which in my opinion is easier to read.</p>]]></content><author><name></name></author><category term="Javascript" /><category term="FileReader" /><category term="Events" /><summary type="html"><![CDATA[Using javscript to order lists]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://frsanchez.github.io//assets/img/ordering.png" /><media:content medium="image" url="https://frsanchez.github.io//assets/img/ordering.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Spirograph</title><link href="https://frsanchez.github.io//spiro/" rel="alternate" type="text/html" title="Spirograph" /><published>2020-02-02T00:00:00-08:00</published><updated>2020-02-02T00:00:00-08:00</updated><id>https://frsanchez.github.io//Spirograph</id><content type="html" xml:base="https://frsanchez.github.io//spiro/"><![CDATA[This is a small javascript program that simulates a spirograph based
on the mathematical formulas described in
<a href="http://www.mathematische-basteleien.de/spirographs.htm">Mathematische Basteleien</a>
The implementation is done with html canvas and javascript

<div class="spiro">
  <div>
  <canvas id="myCanvas" width="600" height="500" >
  </canvas >
  </div>

  <div class="container">
    <div class="row">
      <div class="col-md">
        <div>
          <label for="oR">Radius:</label>
          <input type="range" min="0" max="1" id="oR">
          <input type="text" value="1" id="outerRadius">
        </div>
        <div>
          <label for="iR">radius:</label>
          <input type="range" min="0" max="1" id="iR">
          <input type="text" value="1" id="innerRadius">
        </div>
        <div>
          <label for="cycles">cycles:</label>
          <input type="range" min="0" max="1" id="cycles">
          <input type="text" value="1" id="ratio">
        </div>
      </div>
      <div class="col">
        <div id="red"></div>
        <div id="green"></div>
        <div id="blue"></div>

        <div id="swatch" class="ui-widget-content ui-corner-all"></div>
      </div>
    </div>
  </div>


  <div>
    <button class="ui-button ui-widget ui-corner-all" id='draw'>Draw!</button>
    <button class="ui-button ui-widget ui-corner-all" id='clear'>Clear</button>
    <button class="ui-button ui-widget ui-corner-all" id='undo'>Undo</button>
  </div>

  <a id="dl" download="spirograph.png">Click to download the image</a>

</div>
<hr/>]]></content><author><name></name></author><summary type="html"><![CDATA[This is a small javascript program that simulates a spirograph based on the mathematical formulas described in Mathematische Basteleien The implementation is done with html canvas and javascript]]></summary></entry><entry><title type="html">Binary Search Tree</title><link href="https://frsanchez.github.io//2020/01/27/BinarySearchTree.html" rel="alternate" type="text/html" title="Binary Search Tree" /><published>2020-01-27T09:00:00-08:00</published><updated>2020-01-27T09:00:00-08:00</updated><id>https://frsanchez.github.io//2020/01/27/BinarySearchTree</id><content type="html" xml:base="https://frsanchez.github.io//2020/01/27/BinarySearchTree.html"><![CDATA[<p>This is the first article in a series that aims to cover common data structures.</p>

<p>A binary search tree is an in-memory data structure whose purpose in life is to make
ultra fast searches even through large amounts of data. The main downside of this
structure is the need for the data to be ordered.</p>

<p>Let’s start first by identifying why a binary search is so fast. If we have an array as shown
in the image below, with elements a fixed number of elements in it as long as they are
sorted we can use what is called a binary search to find if an element is contained in the array or not.</p>

<p><img src="/assets/img/array.png" alt="array" /></p>

<p>A binary search purpose is to eliminate half of the data in every iteration slicing each
time the amount of data that needs to be searched. In the array above, we would start by
looking at the element in the middle ( n/2 ). If the data we are looking for is there
our search is done. The next step is the one that makes the split it half. If the
element we are looking for is less than the middle, then we repeat the search in the
middle left, otherwise we repeat the search in the middle right. And then repeat the
same sequence as you can see in the images below.</p>

<p><img src="/assets/img/arrayMiddle.png" alt="array with middle" /></p>

<p>Eventually we will find the element we are looking for, or we would traverse the whole dataset
in the minimum number possible of steps making sure the element is not there. Keep in mind that
this algorithm takes into account the fact that the data within the array is already ordered
using the same criteria that will be used to search within it. If you need to start with
unsorted data, then you need to sort it first.</p>

<p>Now let’s take this to the next level. What if each element within the array was uniquely placed in memory
with a simple way of reaching to the elements on the left, or the elements on the right? But each of those
sets of elements need to maintain the same rule. That is what we can refer to as a node.
A <em>Node</em> is going to have 3 pieces to it:</p>
<ul>
  <li>Data</li>
  <li>A pointer to a node on the left</li>
  <li>A pointer to a node on the right</li>
</ul>

<p>Each node will point in turn to another node, or when the node doesn’t have any left or right pointers, it is called a leaf.
In the example below, you can see the node in the middle has the value of 100 - and this is called the root,
because it is our entry point into the tree. All the data on the left hand side of the root is less than 100
while all the nodes on the right will have values larger than 100.</p>

<p><img src="/assets/img/OrderedTree.png" alt="binary search tree" /></p>

<p>With such a tree, we can easily create a recursive search algorithm. The following
piece of code is written in Java:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinarySearchTree</span> <span class="o">{</span>
  <span class="c1">//... This is a snippet</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Node</span>
  <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Data</span> <span class="n">data</span> <span class="o">=</span> <span class="no">NULL</span><span class="o">;</span> <span class="c1">// we assume Data is defined and can be compared</span>
    <span class="kd">private</span> <span class="nc">Node</span> <span class="n">left</span> <span class="o">=</span> <span class="no">NULL</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Node</span> <span class="n">right</span> <span class="o">=</span> <span class="no">NULL</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Node</span> <span class="nf">getLeft</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">left</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Node</span> <span class="nf">getRight</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">right</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Data</span> <span class="nf">getData</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">data</span><span class="o">;</span> <span class="o">}</span>
  <span class="o">}</span>

  <span class="nc">Node</span> <span class="nf">search</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">,</span> <span class="nc">Data</span> <span class="n">target</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">getData</span><span class="o">()</span> <span class="o">==</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">node</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">.</span><span class="na">getData</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">.</span><span class="na">getLeft</span><span class="o">()</span> <span class="o">!=</span> <span class="no">NULL</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="nf">search</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">target</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">&gt;</span> <span class="n">node</span><span class="o">.</span><span class="na">getData</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">.</span><span class="na">getRight</span><span class="o">()</span> <span class="o">!=</span> <span class="no">NULL</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="nf">search</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">target</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="no">NULL</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<hr />
<p>Below is the same approach but written in C++</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">struct</span> <span class="nc">Node</span>
<span class="p">{</span>
    <span class="n">Data</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span> <span class="c1">// NodeData is defined somewhere else and is comparable</span>
    <span class="n">Node</span><span class="o">*</span> <span class="n">left</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">Node</span><span class="o">*</span> <span class="n">right</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">Node</span><span class="o">*</span> <span class="nf">search</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">node</span><span class="p">,</span> <span class="n">Data</span> <span class="o">&amp;</span><span class="n">target</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">node</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">target</span> <span class="o">&lt;</span> <span class="o">*</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">search</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">,</span> <span class="n">target</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">target</span> <span class="o">&gt;</span> <span class="o">*</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">search</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">,</span> <span class="n">target</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Stay tuned, because in future articles I will add more operations to the Binary Search Tree and will
also talk about optimizing the code utilizing more object oriented principles and strengths
of Java and C++.</p>]]></content><author><name></name></author><category term="BinarySearch" /><category term="BinaryTree" /><category term="Data structures" /><category term="Programing" /><summary type="html"><![CDATA[First article in a series that aims to cover common data structures.]]></summary></entry><entry><title type="html">How to calculate your vehicle’s towing capacity</title><link href="https://frsanchez.github.io//2019/12/25/HowToTowingCapacity.html" rel="alternate" type="text/html" title="How to calculate your vehicle’s towing capacity" /><published>2019-12-25T00:00:00-08:00</published><updated>2019-12-25T00:00:00-08:00</updated><id>https://frsanchez.github.io//2019/12/25/HowToTowingCapacity</id><content type="html" xml:base="https://frsanchez.github.io//2019/12/25/HowToTowingCapacity.html"><![CDATA[<p>As we decided to get a travel trailer,
we quickly discovered that a towing capacity
stated in the manual of my car is not actually even remotely the only value needed to safely tow a trailer.</p>

<p><img src="/assets/img/hitch.png" alt="hitch" />
The result has to do with the relationship between the payload capacity – or cargo capacity - of the vehicle,
also called TV (Towing Vehicle), and the tongue weight.
The tongue weight is usually 10% – 15% of the overall trailer weight when properly distributed.</p>

<p>First you have to start looking for the data required to do the calculation
either online or on your vehicle’s manual. The words used to describe everything are
pretty descriptive, but it is a lot of lingo and it takes some time to make them part of your day to day
vocabulary.</p>

<p>For the vehicle, you need to find the following:</p>
<ul>
  <li><a href="https://en.wikipedia.org/wiki/Curb_weight" target="_blank">Curb Weight</a>: which is the weight of the vehicle without any passengers or cargo.
You can find that in your vehicle’s manual, on a sticker on the driver’s side, or on the manufacturer’s website.</li>
  <li><a href="https://en.wikipedia.org/wiki/Gross_vehicle_weight_rating" target="_blank">GVWR or Gross Vehicle Weight Rating</a>. This is also in the manual and usually on the driver’s side sticker, and it is the max weight the vehicle can have. Make sure you never exceed this value for any reason because you can put your life and other’s at risk.</li>
  <li>GCVWR or Gross Combined Vehicle Weight Rating. Sometimes found on the driver’s side sticker, or the manual. It refers to how much weight can be carried by the vehicle including the trailer, hence the word <em>Combined</em>.</li>
  <li>Payload or Cargo capacity. This number should be the GVWR minus the curb weight. Giving you how much fuel, baggage and occupants can go safely into the vehicle. This value also is used to carry the tongue of the trailer.</li>
  <li>Towing capacity. Stated in the manual. This is usually not that useful because you can’t tow more than the GCVWR minus the GVWR, but this gives you a sense of security that your vehicle was built with extra capacity in several parts that make it safe to reach the limit.</li>
</ul>

<p>For the trailer, you need 3 values:</p>
<ul>
  <li>UVW or Unloaded Vehicle Weight. Which is the weight from the factory without dealer options, but it usually includes full tanks of propane.</li>
  <li>GVWR. Same as the vehicle. This is the maximum weight the trailer can carry.</li>
  <li>Hitch Weight. It should be 10% - 15% of the overall weight of the trailer.</li>
</ul>

<p>This is where things start getting more difficult. But for simplicity you should assume you
will be carrying your trailer fully loaded - that’s at the GVWR for any required calculation
including the weight of the hitch. That will give you enough leeway.</p>

<p>As you can see, all those names are kind of confusing in the beginning, but as you start getting
familiar with them, it becomes easier to understand how much you can actually tow safely.
Again never exceed the GVWR and GCVWR set by the manufacturer. You can find some tricks on the
internet to increase the payload capacity of your truck, specially by upgrading the tires, but
that doesn’t mean the overall GCVWR can go up, and that is because the manufacturer already
qualified all the components for such rating and it states that such value is safe for operation.
Think about it this way: if you are in an accident and you are found at fault, your insurance
may refuse to pay if you are found to have exceeded your vehicle capabilities in any way.</p>

<p>To make it easier to take into account all the values that I mentioned above,
I used the data and formulas from the guys at
<a href="http://www.keepyourdaydream.com/payload/" target="_blank">Keep Your Daydream</a> and I wrote a simple online calculator.</p>

<p>Is it open source? Well of course <a href="https://github.com/FrSanchez/TowingCapacity" target="_blank">it is</a>, but even better, you can access it
from your phone or computer. I also added the <a href="/calculator">calculator</a> to this website.</p>

<p>Hopefully it works for a lot of people and please leave a comment here if you use it.</p>]]></content><author><name>Francisco Sanchez</name></author><category term="Towing" /><category term="RV" /><category term="Calculator" /><summary type="html"><![CDATA[As we decided to get a travel trailer, we quickly discovered that a towing capacity stated in the manual of my car is not actually even remotely the only value needed to safely tow a trailer.]]></summary></entry><entry><title type="html">Building a backyard pond</title><link href="https://frsanchez.github.io//2019/11/29/BuildingAPond.html" rel="alternate" type="text/html" title="Building a backyard pond" /><published>2019-11-29T00:00:00-08:00</published><updated>2019-11-29T00:00:00-08:00</updated><id>https://frsanchez.github.io//2019/11/29/BuildingAPond</id><content type="html" xml:base="https://frsanchez.github.io//2019/11/29/BuildingAPond.html"><![CDATA[<p>Having a water feature in the backyard is always nice, but there are
some steps to maintain the feature that come along with any installation.
If properly cared for the feature can last for years and give a nice touch
to your house.</p>

<p>It all started after few years we put sod in my backyard. It is below grade, what means
there is a slope from the front porch to the backyard, that makes it pretty much at
the basement level. Because of this situation, the backyard doesn’t drain much, and it
remains wet most of the year. It is usually good to keep the grass green all year long.
The problem was that we didn’t notice the grass was wet naturally because we setup
a timer with a sprinkler that took care of watering my backyard sod all summer long.</p>

<p>After two years, a big portion of the backyard was too wet and died, I guess you can stay
it drowned. At that point we could either put more sod, but with proper cleanup first or
build some water feature that could cover the area that was lost. It was not that bad,
probably around 190 to 250 square feet needed some fixing. Also I have this fascination
for fish tanks, which then took to the next level and finally decided to build a pond.</p>

<p>Deciding on the location was the easiest thing, because I explained above, the grass
was already dead in a large area, and we needed to cover it with something. Then we opted
for a prefab <a href="https://amzn.to/30pb12B">hard shell</a>
similar to the one shown below.</p>

<p>The process was more work than planning after that.
It should start with digging a hole big enough to fit the pond, but in preparation for
digging, having the shape in the ground makes the process a somewhat easier. What I mean is
taking the liner and placing it upside down over the ground, then using some
<a href="https://amzn.to/30mAee2">Rust-Oleum Marking Spray Paint</a> to draw
the shape and make the whole reach those edges.</p>

<p>As I mentioned before there is a slope that goes from the front of my property to the backyard
and we used this opportunity to use the extra dirt and start shaping some stairs (that eventually
completed) and that took care of the extra dirt. It took me and my son two days to finish digging
the whole. Meanwhile my wife purchased a few bags of gravel from the local hardware store along
with couple of decorative plants.</p>

<p>When placing the prefab it is important to check for proper leveling, otherwise the water will get out of the pond.
It is just common sense. And then it is time to fill back all the edges of the prefab with some of the dirt
that was dug out earlier. Place the plants near the edge of the pond, and put the gravel around the pond.</p>

<p>Before introducing any fish or plants into the pond, we decided to fill it with water to the middle, to kind of
wash out all the dirt during the process. Then dumped the water out by using the hose as a syphon. I’m glad
we did it because a lot of debris fell into the liner just by filling the holes around it and when doing
the plants.</p>

<p>Next should be the filter. When visiting the hardware store, I asked about pond supplies and they have a good variety
but boy those are expensive. Thankfully Amazon came to the rescue and found the same <a href="https://amzn.to/2NtIpQC">InPond 5 in 1</a>
model but for about 80% of the store price, with next day delivery. We chose that because the guys at
the hardware store recommended - that made it easier when navigating all the options in Amazon.
It contains an ultra-violet lamp that gets rid of organic matter entering the filter and several biological
and mechanical filters that require little maintenance. It also comes with a fountain and it just looks cool.
Installing the filter was really easy. Just follow the included instructions and place it in the center of the pond.</p>

<p>At this moment, the next step was to let the filter run for a few days before introducing the fish.
When visiting the pet store we didn’t really have any high expectations, therefore we purchased
a dozen of comet gold fish like for 35 cents each. They were tiny - about half an inch. Also with the filter we
started an amazon subscription for <a href="https://www.amazon.com/gp/product/B00176IK5S/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00176IK5S&amp;linkCode=as2&amp;tag=frsanchezgith-20&amp;linkId=0c0f40c1e5634f153d7b88109e65f11b">fish food</a>, again after a recommendation from the pet store, but
the price at amazon is just so much better and the subscription quite convenient. If you didn’t know, Amazon offers a “Subscribe &amp; Save” option in several of their products, which for me works like a charm sending me the needed fish food every quarter and at the same time it reduces the price even more!</p>

<p>And that was it! The finished product is shown below:
<img src="/assets/img/pondtop.jpg" alt="pond with fish" title="pond with fish" /></p>

<h2 id="a-short-video">A short video</h2>
<iframe width="720" height="450" src="https://www.youtube.com/embed/6nGO3nnOEL8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>It has been already two years since we installed the pond. Half of the fish died during the first two weeks.
But the other six survived and started growing at regular rate. Whenever we leave on vacation we ask some
of our neighbors to feed the fish once a day.</p>

<p>The filter requires regular maintenance, every 2-3 months cleaning and changing the carbon filters. And so far after 1 and a half years we had to change the light bulb for a new one.  And that is pretty much all the maintenance.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Having a water feature in the backyard is always nice, but there are some steps to maintain the feature that come along with any installation. If properly cared for the feature can last for years and give a nice touch to your house.]]></summary></entry></feed>