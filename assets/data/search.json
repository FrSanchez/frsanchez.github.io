[
  
  {
    "title"    : "Chapiñones con papas",
    "category" : "",
    "tags"     : " recetas, champiñones, hongos, papas, cocina",
    "url"      : "/chanpinonesconpapas/",
    "date"     : "January 23, 2021",
    "excerpt"  : "\n",
  "content"  : "\n"
} ,
  
  {
    "title"    : "El Santo Rosario (spanish)",
    "category" : "",
    "tags"     : " rosary, praying",
    "url"      : "/rosario/",
    "date"     : "June 22, 2020",
    "excerpt"  : "Una de las devociones cristianas más hermosas es meditar la vida de nuestro Señor\nJesucristo en compañía de su santa madre. Aunque no me considero experto en el tema,\nsi quiero compartir este excelente ejercicio espiritual diaro y entonces aquí\npr...",
  "content"  : "Una de las devociones cristianas más hermosas es meditar la vida de nuestro Señor\nJesucristo en compañía de su santa madre. Aunque no me considero experto en el tema,\nsi quiero compartir este excelente ejercicio espiritual diaro y entonces aquí\npresento una breve introducción a como rezar el rosario. Para una explicación detallada\nsugiero leer la carta “Rosarium Virginis Mariae” de San Juan Pablo II.\n\nEl rosario puede ser también una actividad en grupo, para lo cual hay algunas\npequeñas reglas para hacerlo sumamente interactivo de tal manera que todos\nparticipen por igual, pero manteniendo una persona que lo dirija, y es exactamente\nel mismo formato cuando se hace con una sola persona.\n\nUna búsqueda en internet te regresará distintas ligas con algunas pequeñas variaciones\nde como iniciar, y como cerrar tu oración del rosario. Aquí presento el formato que\nmás ha funcionado para mi.\n\nVoy a iniciar indicando el formato y voy a poner el texto completo de las oraciones\ndespués, incluyendo los grupos de misterios separados por día de la semana.\n\nÓrden del rosario.\n\nInicio\nSignarse\nHacemos la señal de la cruz en la frente, luego en la boca y luego en el pecho. mientras\nrepetimos:\n\n\n  \n    \n      Por la señal de la Santa Cruz, de nuestros enemigos líbranos Señor, Dios nuestro. En el nombre del Padre, y del Hijo, y del Espíritu Santo. Amén.\n    \n  \n\n\nCredo y acto de contrición\n\n\n  \n    \n      Credo de los Apóstoles\n    \n  \n  \n    \n      Creo en Dios, Padre todo poderoso, creador del cielo y de la tierra. Creo en Jesucristo, su único Hijo, nuestro Señor, que fue concebido por obra y gracia del Espíritu Santo, nació de santa María Virgen, padeció bajo el poder de Poncio Pilato, fue crucificado, muerto y sepultado, descendió a los infiernos, al tercer día resucitó de entre los muertos, subió a los cielos y está sentado a la derecha de dios, Padre todo poderoso. Desde allí ha de venir a juzgar a vivos y muertos. Creo en el Espíritu Santo, la santa iglesia Católica, la comunión de los santos, el perdón de los pecados, la resurrección de la carne y la vida eterna. Amén.\n    \n    \n      Acto de contrición (opcional)\n    \n  \n  \n    \n      Jesús, Dios y hombre verdadero, Creador, Padre y Redentor mío; por que tú eres bondad infinita, y porque te amo sobre todas las cosas, me pesa de todo corazón haberte ofendido, también me pesa porque puedes castigarme con las penas del infierno. Por eso propongo con tu gracia, enmendarme, confesarme, alejarme de las ocasiones de pecado y cumplir la penitencia que me fuera impuesta. Confio en que me perdonarás por tu infinita misericordia. Amén\n    \n  \n\n\nTres Ave María\n\nMisterios\n\nEl rosario tiene 5 grupos de diez cuentas separados por una única cuenta. Cada grupo de diez cuentas se llama una década.\nPara poder entrar en la década, el que dirige el rosario debe enunciar el misterio, seguido por un Padre Nuestro.\nUn Misterio es un episodio de la vida de nuestro Señor Jeuscristo el cual meditamos durante cada una de las diez cuentas\njunto con la madre de nuestro señor y es por eso que en cada cuenta se reza un Ave María. Luego se termina la década con una o más jaculatorias.\n\nUna jaculatoria es una oración corta llena de amor y devoción con la que nos comunicamos con nuestro Señor Padre,\nsu hijo Jesucristo, la santa Virgen María y el Espíritu Santo. Su finalidad es mantenernos bajo la gracia de Dios\na lo largo del día, todos los días de nuestra vida.\n\nLos misterios que se meditan cambian de acuerdo al día de la semana, y están expuestos en la siguiente tabla:\n\n\n  \n    \n      Día\n      Misterios\n    \n  \n  \n    \n      Lunes y sábado\n      Gozosos\n    \n    \n      Jueves\n      Luminosos\n    \n    \n      Martes y viernes\n      Dolorosos\n    \n    \n      Miércoles y domingo\n      Gloriosos\n    \n  \n\n\nMisterios de gozo\n\n  La Anunciación\n  La Visitación\n  El nacimiento de Jesús\n  La Presentación\n  El niño perdido y hallado en el templo\n\n\nMisterios de luz\n\n  El bautismo en el Jordán\n  La autorrevelación en las bodas de Caná\n  El anuncio del Reino de Dios, invitando a la conversión\n  La transfiguración\n  La institución de la Eucaristía\n\n\nMisterios de dolor\n\n  La agonía en el huerto\n  La flagelación de nuestro señor\n  La coronación de espinas\n  El camino al Calvario\n  La crucifixión\n\n\nMisterios de gloria\n\n  La resurreción del Señor\n  La ascención\n  La venida del Espíritu Santo\n  La asunción de la Virgen Santísima\n  La coronación de la Virgen Santísima como Reina del Cielo\n\n"
} ,
  
  {
    "title"    : "HashMap",
    "category" : "",
    "tags"     : " HashMap, Data structures, Programing",
    "url"      : "/2020/03/16/Hashmap.html",
    "date"     : "March 16, 2020",
    "excerpt"  : "This is another article in the group of data structures.\n\nA hash map is a powerful in-memory data structure that allows adding and retrieving data in a constant time.\nMost modern languages have support for this and usually they include variations ...",
  "content"  : "This is another article in the group of data structures.\n\nA hash map is a powerful in-memory data structure that allows adding and retrieving data in a constant time.\nMost modern languages have support for this and usually they include variations and optimizations over it,\ntherefore most of us take this for granted, but this was not always the case, and here I try to explain\nhow this one works.\n\nThe basic data structure supported by any programming language is the array. An array is a contiguous block of memory\nset aside to store the same type of data. For example an array of 10 integers, will occupy in a 64 bit machine 80 bytes.\nAn array is quite powerful because you can write and retrieve values from and to the array by using a single\noperation, which is denoted as O(1) using the Big O notation.\n\nWhat a hash map solves is a problem where we want to have a set of data indexed instead of by numbers, by an\narbitrary type of data, this is known as an associative array because each value in the array is associated with a key\ninstead of a numeric index assigned by the value’s position within the array. But of course the order of the data\nwithin the associative array is not given by any position. Conceptually it can be visualized as the following image:\n\n\n\nIn the left hand side we have a basic array, indexed by the position in memory (and this is the reason why an array\n  starts with index 0), while on the right hand side we have an associative array indexed by an arbitrary key. If we stored\n  any value in the element associated with “alpha” we would be overwriting the element there.\n\nThe way to achieve this, first is to create an array with a fixed size that is capable of holding as many\nelements as we need, and then using a hash function that translates the key into a unique integer value.\nOnce we have an integer value, we can simply calculate the hash key modulo the size of the array to find\nthe location of the element in the array.\n\nHaving a unique key and having the same key every time each element requires computing it is a must for the above\ndescription to work. What happens after that with the key can change depending on the implementation. Having a large\ninteger module a shorter one (the size of the array) will lead inevitably to what is called collisions. That means two or more\nkeys will end up pointing to the same element in the array. To solve the collision, one way is to generate\na single linked list that starts in the element of the array indicated by the hash key. Another option is to start\ncalculating the (key + i) modulo (array size). Here i will mean how many iterations have to happen for us to find\nan empty spot in the table. In my opinion the first one is a cleaner one and the one I have used for years.\n\nIf we wanted to calculate a simple hash value for the string in the input box below, we can use the following code\n\nfunction hashForString(str) {\n  var total = 0;\n  for(i = 0; i &amp;lt; str.length; i++) {\n    total += str.charCodeAt(i);\n  };\n  return total;\n}\n\nEnter text:  Hash: \n\nJavascript already provides associative arrays built, therefore there is no need to create a hash map, however\nfor example purposes we can implement a simple one following the guidelines above with the following code,\ninstead of writing pseudocode I prefer giving fully working javascript that can be run in this same browser\nor adapted to your preferred language.\n\n// Holds the key value pair, as is the basis for a simple linked list\nclass Node {\n  constructor(key, value) {\n    this.key = key;\n    this.value = value;\n    this.next = null;\n  }\n}\n\nclass HashMap {\n  constructor() {\n    // We use for example a 20 element array.\n    this.table = new Array(20);\n    for(var i =0; i &amp;lt; 20; i++) {\n      this.table[i] = null;\n    }\n  }\n\n  put(key, value) {\n    // as usual validation, just make sure both the key and the value are valid\n    if (typeof(key) === &#39;undefined&#39; || typeof(value) === &#39;undefined&#39;)\n      return;\n    var hash = hashForString(key) % 20;\n    if (!this.table[hash]) {\n      this.table[hash] = new Node(key, value);\n    } else {\n      // this code happens in case of (hash % 20) collisions\n      var node = this.table[hash];\n      while (node.next != null) {\n        node = node.next;\n      }\n      node.next = new Node(key, value);\n    }\n  }\n\n  get(key) {\n    if (typeof(key) === &#39;undefined&#39;)\n      return;\n    var hash = hashForString(key) % 20;\n    var node = this.table[hash];\n    // we start on the first node in the table\n    // and iterate until we reach the end or the requested key\n    while (node != null &amp;amp;&amp;amp; node.key !== key) {\n      node = node.next;\n    }\n    if (node) {\n      return node.value;\n    } else {\n      return 0;\n    }\n  }\n\n  // an example of how to use it:\n  var hm = new HashMap();\n  hm.put(&quot;one&quot;, &quot;text 1&quot;);\n  hm.put(&quot;two&quot;, &quot;text 2&quot;);\n  console.log(hm.get(&quot;one&quot;));\n  console.log(hm.get(&quot;two&quot;));\n\nPlease let me know below your comments, and what other programming challenges you would like to get explained here.\n"
} ,
  
  {
    "title"    : "Binary Search Tree in Javascript",
    "category" : "",
    "tags"     : " BinarySearch, BinaryTree, Programing, Javascript",
    "url"      : "/2020/02/24/BinaryTreeInJavascript.html",
    "date"     : "February 24, 2020",
    "excerpt"  : "This is a sample implementation of a Binary Serach Tree in JavaScript. Right now it is a work in progress, please\nkeep looking for updates for this post, as I will keep working on it.\n\nThere will be a graphical representation of the tree in the ar...",
  "content"  : "This is a sample implementation of a Binary Serach Tree in JavaScript. Right now it is a work in progress, please\nkeep looking for updates for this post, as I will keep working on it.\n\nThere will be a graphical representation of the tree in the are below that you can use to visualize the operations\nas I keep progressing in this code.\n\n\n\nNumber:\n\nInsert\nSearch\n\nFirst we have to define the basic piece, and that is going to be a Node:\n\nclass Node {\n  constructor(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n  }\n  // ... other methods will go here\n}\n\nThe JavaScript constructor takes a value to store in the current node as the value, and also\nsets the pointers to the left and right nodes as null. This is important to make sure the variables\ndon’t remain as undefined and also that they exist when accessing them from other methods.\n\nAs for the methods, let’s start by implementing the insert. The core of the algorithm is to check\nif the new data has to go either to the left, or to the right, and then call the same insert recursively\nfrom the chosen node, like the code below that returns a boolean value to indicate whether the new value\nwas inserted or not:\n\n// ...\n  insert(node) {    \n    // First make sure we are inserting data but we also prevent duplicates\n    if (node == null || typeof(node) == &#39;undefined&#39; || this.data === node.data) {\n      return false;\n    }\n    // now chose whether go left\n    if (this.data &amp;gt; node.data) {\n      if (this.left === null) {\n        this.left = node;\n        return true;\n      }\n      return this.left.insert(node);\n    } else {\n      // or go right\n      if (this.right === null) {\n        this.right = node;\n        return true;\n      }\n      return this.right.insert(node);\n    }\n    return false;\n  }\n// ...\n\n"
} ,
  
  {
    "title"    : "Ordering names",
    "category" : "",
    "tags"     : " Javascript, FileReader, Events",
    "url"      : "/2020/02/20/OrderingNames.html",
    "date"     : "February 20, 2020",
    "excerpt"  : "This is a sample block to read a list of names, order them and also create a random ordered list. The code even allows to drag and drop files into the text area for easier manipulation of long lists, and also to avoid storing any data on our serve...",
  "content"  : "This is a sample block to read a list of names, order them and also create a random ordered list. The code even allows to drag and drop files into the text area for easier manipulation of long lists, and also to avoid storing any data on our server - because there is no need to do it.\n\nThe working area is next and below that is the description of the code\n\nEnter a list of names:\n\n\n\nGo\n\n\n  \n    \n      Ordered\n      \n      \n    \n    \n      Randomized\n      \n      \n    \n  \n\n\nDescription of the code\n\nJavascript file in github\n\nTo read the names, the code takes the contents of the textarea and puts it into an array line by line to be able to manipulate it. JQuery makes it easy by using the textarea locator, retrieving the value and the using split() by newline, then sorting is native in javascript for an array:\n\nvar names = $(&#39;#names&#39;).val().split(&quot;\\n&quot;);\nnames.sort();\n\nJavascript provides a pseudo-random number generator that produces number in the range (0, 1). For the case presented here we need an integer number in the range [0, names.length] for that we can write a simple function to take an upper boundary and produce a pseudo-random integer in that range:\n\nrandom = function(bound) {\n  return Math.floor(Math.random() * bound);\n}\n\nTo be able to generate a random list, the code needs to iterate through the whole list of names and randomly select a new position for every entry:\n\nfor(i = 0; i &amp;lt; names.length; i++) {\n  var dest = random(names.length);\n  if (dest != i) {\n    var t = names[dest];\n    names[dest] = names[i];\n    names[i] = t;\n  }\n}\n\nHandling files\nTo be able to manipulate files, the browser will generate events related to drag and drop, for which the program needs to handle dragOver, dragEnter, and drop. Within the drop handler, the program can instantiate the HTML5 FileReader object, that will read the local file. The reader works on events to avoid blocking the main (and only) thread executing the script. Within the handler of the reader, I load the contents of the file into the textarea using JQuery $.text() method.\n\nvar reader = new FileReader();\nreader.addEventListener(&quot;load&quot;, function () {\n    var fileText = reader.result;\n    $(&#39;#names&#39;).text(fileText);\n}, false);\nreader.readAsText(file);\n\nConclusion\n\nReading a file is now part HTML5, array manipulation is done easily with javascript, and that includes the sort method, as well as a pseudo-random number generator. Javascript provides also handling of the DOM but in this case I opted for JQuery which in my opinion is easier to read.\n"
} ,
  
  {
    "title"    : "Spirograph",
    "category" : "",
    "tags"     : " ",
    "url"      : "/spiro/",
    "date"     : "February 2, 2020",
    "excerpt"  : "This is a small javascript program that simulates a spirograph based\non the mathematical formulas described in\nMathematische Basteleien\nThe implementation is done with html canvas and javascript\n\n\n  \n  \n  \n  \n\n  \n    \n      \n        \n          Rad...",
  "content"  : "This is a small javascript program that simulates a spirograph based\non the mathematical formulas described in\nMathematische Basteleien\nThe implementation is done with html canvas and javascript\n\n\n  \n  \n  \n  \n\n  \n    \n      \n        \n          Radius:\n          \n          \n        \n        \n          radius:\n          \n          \n        \n        \n          cycles:\n          \n          \n        \n      \n      \n        \n        \n        \n\n        \n      \n    \n  \n\n\n  \n    Draw!\n    Clear\n    Undo\n  \n\n  Click to download the image\n\n\n\n"
} ,
  
  {
    "title"    : "Binary Search Tree",
    "category" : "",
    "tags"     : " BinarySearch, BinaryTree, Data structures, Programing",
    "url"      : "/2020/01/27/BinarySearchTree.html",
    "date"     : "January 27, 2020",
    "excerpt"  : "This is the first article in a series that aims to cover common data structures.\n\nA binary search tree is an in-memory data structure whose purpose in life is to make\nultra fast searches even through large amounts of data. The main downside of thi...",
  "content"  : "This is the first article in a series that aims to cover common data structures.\n\nA binary search tree is an in-memory data structure whose purpose in life is to make\nultra fast searches even through large amounts of data. The main downside of this\nstructure is the need for the data to be ordered.\n\nLet’s start first by identifying why a binary search is so fast. If we have an array as shown\nin the image below, with elements a fixed number of elements in it as long as they are\nsorted we can use what is called a binary search to find if an element is contained in the array or not.\n\n\n\nA binary search purpose is to eliminate half of the data in every iteration slicing each\ntime the amount of data that needs to be searched. In the array above, we would start by\nlooking at the element in the middle ( n/2 ). If the data we are looking for is there\nour search is done. The next step is the one that makes the split it half. If the\nelement we are looking for is less than the middle, then we repeat the search in the\nmiddle left, otherwise we repeat the search in the middle right. And then repeat the\nsame sequence as you can see in the images below.\n\n\n\nEventually we will find the element we are looking for, or we would traverse the whole dataset\nin the minimum number possible of steps making sure the element is not there. Keep in mind that\nthis algorithm takes into account the fact that the data within the array is already ordered\nusing the same criteria that will be used to search within it. If you need to start with\nunsorted data, then you need to sort it first.\n\nNow let’s take this to the next level. What if each element within the array was uniquely placed in memory\nwith a simple way of reaching to the elements on the left, or the elements on the right? But each of those\nsets of elements need to maintain the same rule. That is what we can refer to as a node.\nA Node is going to have 3 pieces to it:\n\n  Data\n  A pointer to a node on the left\n  A pointer to a node on the right\n\n\nEach node will point in turn to another node, or when the node doesn’t have any left or right pointers, it is called a leaf.\nIn the example below, you can see the node in the middle has the value of 100 - and this is called the root,\nbecause it is our entry point into the tree. All the data on the left hand side of the root is less than 100\nwhile all the nodes on the right will have values larger than 100.\n\n\n\nWith such a tree, we can easily create a recursive search algorithm. The following\npiece of code is written in Java:\n\npublic class BinarySearchTree {\n  //... This is a snippet\n  public class Node\n  {\n    private Data data = NULL; // we assume Data is defined and can be compared\n    private Node left = NULL;\n    private Node right = NULL;\n\n    public Node getLeft() { return left; }\n    public Node getRight() { return right; }\n    public Data getData() { return data; }\n  }\n\n  Node search(Node node, Data target)\n  {\n    if (node.getData() == target) {\n      return node;\n    }\n    if (target &amp;lt; node.getData() &amp;amp;&amp;amp; node.getLeft() != NULL) {\n      return search(node.left, target);\n    }\n    if (target &amp;gt; node.getData() &amp;amp;&amp;amp; node.getRight() != NULL) {\n      return search(node.right, target);\n    }\n    return NULL;\n  }\n}\n\n\nBelow is the same approach but written in C++\n\nstruct Node\n{\n    Data* data; // NodeData is defined somewhere else and is comparable\n    Node* left = NULL;\n    Node* right = NULL;\n};\n\nNode* search(Node *node, Data &amp;amp;target)\n{\n  if (!node) {\n    return NULL;\n  }\n  if (*node-&amp;gt;data == target) {\n    return node;\n  }\n  if (target &amp;lt; *node-&amp;gt;data &amp;amp;&amp;amp; node-&amp;gt;left) {\n    return search(node-&amp;gt;left, target);\n  }\n  if (target &amp;gt; *node-&amp;gt;data &amp;amp;&amp;amp; node-&amp;gt;right) {\n    return search(node-&amp;gt;right, target);\n  }\n  return NULL;\n}\n\nStay tuned, because in future articles I will add more operations to the Binary Search Tree and will\nalso talk about optimizing the code utilizing more object oriented principles and strengths\nof Java and C++.\n"
} ,
  
  {
    "title"    : "How to calculate your vehicle&#39;s towing capacity",
    "category" : "",
    "tags"     : " Towing, RV, Calculator",
    "url"      : "/2019/12/25/HowToTowingCapacity.html",
    "date"     : "December 25, 2019",
    "excerpt"  : "As we decided to get a travel trailer,\nwe quickly discovered that a towing capacity\nstated in the manual of my car is not actually even remotely the only value needed to safely tow a trailer.\n\n\nThe result has to do with the relationship between th...",
  "content"  : "As we decided to get a travel trailer,\nwe quickly discovered that a towing capacity\nstated in the manual of my car is not actually even remotely the only value needed to safely tow a trailer.\n\n\nThe result has to do with the relationship between the payload capacity – or cargo capacity - of the vehicle,\nalso called TV (Towing Vehicle), and the tongue weight.\nThe tongue weight is usually 10% – 15% of the overall trailer weight when properly distributed.\n\nFirst you have to start looking for the data required to do the calculation\neither online or on your vehicle’s manual. The words used to describe everything are\npretty descriptive, but it is a lot of lingo and it takes some time to make them part of your day to day\nvocabulary.\n\nFor the vehicle, you need to find the following:\n\n  Curb Weight: which is the weight of the vehicle without any passengers or cargo.\nYou can find that in your vehicle’s manual, on a sticker on the driver’s side, or on the manufacturer’s website.\n  GVWR or Gross Vehicle Weight Rating. This is also in the manual and usually on the driver’s side sticker, and it is the max weight the vehicle can have. Make sure you never exceed this value for any reason because you can put your life and other’s at risk.\n  GCVWR or Gross Combined Vehicle Weight Rating. Sometimes found on the driver’s side sticker, or the manual. It refers to how much weight can be carried by the vehicle including the trailer, hence the word Combined.\n  Payload or Cargo capacity. This number should be the GVWR minus the curb weight. Giving you how much fuel, baggage and occupants can go safely into the vehicle. This value also is used to carry the tongue of the trailer.\n  Towing capacity. Stated in the manual. This is usually not that useful because you can’t tow more than the GCVWR minus the GVWR, but this gives you a sense of security that your vehicle was built with extra capacity in several parts that make it safe to reach the limit.\n\n\nFor the trailer, you need 3 values:\n\n  UVW or Unloaded Vehicle Weight. Which is the weight from the factory without dealer options, but it usually includes full tanks of propane.\n  GVWR. Same as the vehicle. This is the maximum weight the trailer can carry.\n  Hitch Weight. It should be 10% - 15% of the overall weight of the trailer.\n\n\nThis is where things start getting more difficult. But for simplicity you should assume you\nwill be carrying your trailer fully loaded - that’s at the GVWR for any required calculation\nincluding the weight of the hitch. That will give you enough leeway.\n\nAs you can see, all those names are kind of confusing in the beginning, but as you start getting\nfamiliar with them, it becomes easier to understand how much you can actually tow safely.\nAgain never exceed the GVWR and GCVWR set by the manufacturer. You can find some tricks on the\ninternet to increase the payload capacity of your truck, specially by upgrading the tires, but\nthat doesn’t mean the overall GCVWR can go up, and that is because the manufacturer already\nqualified all the components for such rating and it states that such value is safe for operation.\nThink about it this way: if you are in an accident and you are found at fault, your insurance\nmay refuse to pay if you are found to have exceeded your vehicle capabilities in any way.\n\nTo make it easier to take into account all the values that I mentioned above,\nI used the data and formulas from the guys at\nKeep Your Daydream and I wrote a simple online calculator.\n\nIs it open source? Well of course it is, but even better, you can access it\nfrom your phone or computer. I also added the calculator to this website.\n\nHopefully it works for a lot of people and please leave a comment here if you use it.\n"
} ,
  
  {
    "title"    : "Building a backyard pond",
    "category" : "",
    "tags"     : " ",
    "url"      : "/2019/11/29/BuildingAPond.html",
    "date"     : "November 29, 2019",
    "excerpt"  : "Having a water feature in the backyard is always nice, but there are\nsome steps to maintain the feature that come along with any installation.\nIf properly cared for the feature can last for years and give a nice touch\nto your house.\n\nIt all starte...",
  "content"  : "Having a water feature in the backyard is always nice, but there are\nsome steps to maintain the feature that come along with any installation.\nIf properly cared for the feature can last for years and give a nice touch\nto your house.\n\nIt all started after few years we put sod in my backyard. It is below grade, what means\nthere is a slope from the front porch to the backyard, that makes it pretty much at\nthe basement level. Because of this situation, the backyard doesn’t drain much, and it\nremains wet most of the year. It is usually good to keep the grass green all year long.\nThe problem was that we didn’t notice the grass was wet naturally because we setup\na timer with a sprinkler that took care of watering my backyard sod all summer long.\n\nAfter two years, a big portion of the backyard was too wet and died, I guess you can stay\nit drowned. At that point we could either put more sod, but with proper cleanup first or\nbuild some water feature that could cover the area that was lost. It was not that bad,\nprobably around 190 to 250 square feet needed some fixing. Also I have this fascination\nfor fish tanks, which then took to the next level and finally decided to build a pond.\n\nDeciding on the location was the easiest thing, because I explained above, the grass\nwas already dead in a large area, and we needed to cover it with something. Then we opted\nfor a prefab hard shell\nsimilar to the one shown below.\n\nThe process was more work than planning after that.\nIt should start with digging a hole big enough to fit the pond, but in preparation for\ndigging, having the shape in the ground makes the process a somewhat easier. What I mean is\ntaking the liner and placing it upside down over the ground, then using some\nRust-Oleum Marking Spray Paint to draw\nthe shape and make the whole reach those edges.\n\nAs I mentioned before there is a slope that goes from the front of my property to the backyard\nand we used this opportunity to use the extra dirt and start shaping some stairs (that eventually\ncompleted) and that took care of the extra dirt. It took me and my son two days to finish digging\nthe whole. Meanwhile my wife purchased a few bags of gravel from the local hardware store along\nwith couple of decorative plants.\n\nWhen placing the prefab it is important to check for proper leveling, otherwise the water will get out of the pond.\nIt is just common sense. And then it is time to fill back all the edges of the prefab with some of the dirt\nthat was dug out earlier. Place the plants near the edge of the pond, and put the gravel around the pond.\n\nBefore introducing any fish or plants into the pond, we decided to fill it with water to the middle, to kind of\nwash out all the dirt during the process. Then dumped the water out by using the hose as a syphon. I’m glad\nwe did it because a lot of debris fell into the liner just by filling the holes around it and when doing\nthe plants.\n\nNext should be the filter. When visiting the hardware store, I asked about pond supplies and they have a good variety\nbut boy those are expensive. Thankfully Amazon came to the rescue and found the same InPond 5 in 1\nmodel but for about 80% of the store price, with next day delivery. We chose that because the guys at\nthe hardware store recommended - that made it easier when navigating all the options in Amazon.\nIt contains an ultra-violet lamp that gets rid of organic matter entering the filter and several biological\nand mechanical filters that require little maintenance. It also comes with a fountain and it just looks cool.\nInstalling the filter was really easy. Just follow the included instructions and place it in the center of the pond.\n\nAt this moment, the next step was to let the filter run for a few days before introducing the fish.\nWhen visiting the pet store we didn’t really have any high expectations, therefore we purchased\na dozen of comet gold fish like for 35 cents each. They were tiny - about half an inch. Also with the filter we\nstarted an amazon subscription for fish food, again after a recommendation from the pet store, but\nthe price at amazon is just so much better and the subscription quite convenient. If you didn’t know, Amazon offers a “Subscribe &amp;amp; Save” option in several of their products, which for me works like a charm sending me the needed fish food every quarter and at the same time it reduces the price even more!\n\nAnd that was it! The finished product is shown below:\n\n\nA short video\n\n\nIt has been already two years since we installed the pond. Half of the fish died during the first two weeks.\nBut the other six survived and started growing at regular rate. Whenever we leave on vacation we ask some\nof our neighbors to feed the fish once a day.\n\nThe filter requires regular maintenance, every 2-3 months cleaning and changing the carbon filters. And so far after 1 and a half years we had to change the light bulb for a new one.  And that is pretty much all the maintenance.\n"
} ,
  
  {
    "title"    : "First post!",
    "category" : "",
    "tags"     : " ",
    "url"      : "/2019/11/28/Hello-World.html",
    "date"     : "November 28, 2019",
    "excerpt"  : "\n\nThis is the first post on my new blog. I’m just getting this new blog going, so stay tuned for more.\n\nThe picture in the heading is a close-up of my backyard pond. We dug it and installed a few years back, and put about a dozen small fish. About...",
  "content"  : "\n\nThis is the first post on my new blog. I’m just getting this new blog going, so stay tuned for more.\n\nThe picture in the heading is a close-up of my backyard pond. We dug it and installed a few years back, and put about a dozen small fish. About a year later half of them were dead, but the rest survived the first winter and so far it has been 2 full seasons and they are still growing.\n"
} 
  
  
  
]
